1...
Thread.getName()  获取线程的名字  Thread-编号
currentThread() 指向当前线程
Thread.currentThread().getName()  获取当前执行线程的名字


 在多个线程中，如果一个线程中出现异常，并不会影响其他线程，只是当前线程结束，其他线程继续执行，包括main线程也是一样
   线程的执行并不是main线程结束后，就完了，线程都是独立的，main线程结束了，其他的线程还是会继续执行...

2...
线程安全问题产生原因：
（1）、多个线程在操作共享的数据
 (2)、操作共享数据的线程代码有多条
  有了这2个前提之后--> 当一个线程在执行操作共享数据的多条代码过程中，其他线程参与了运算，就会导致线程安全问题的产生
解决思路：就是将多条操作共享数据的代码封装起来，当有线程正在执行这些代码的时候，其他线程不会参与运算，必须把当前的代码都执行完毕之后，其他的线程在可以参与运算。
同步代码解决问题：
synchronized(对象){
   语句   }

3...
同步 解决线程的安全问题 弊端：相对降低了效率，因为同步的线程都会判断同步锁。
同步的前提：同步中必须有多个线程并使用同一把锁。..

4..
同步函数：
public synchronized void show(){
                              ...}
同步函数锁 是固定的 this
同步代码块的锁是任意的对象
建议使用同步代码块，看起来更加方便。只有同步函数锁是this才能写成同步函数。。

5..
同步静态函数
public static synchronized void show(){
                                  ...      }
静态同步函数使用的锁是 该函数所属字节码文件对象
可以用getClass 方法获取，也可以用当前  类名.class 表示
类名 t=new 类名（）；
synchronized(t.getClass())或者synchronized(类名.class)0

6..
r.wait(); r.notify(); notifyAll();
等待唤醒机制 必须定义在同步中，因为这些方法是操作线程状态的方法，必须明确到到底要操作那个锁上的线程..
7...
多生产 多消费问题
if判断标记，只有一次，会导致不该运行的线程运行了，出现了数据错误的情况。
while判断标记，解决了线程获取执行权后，是否要运行；
notify 只能唤醒一个线程，如果本方唤醒了本方，没有意义，而且while判断标记+notify会导致死锁。。。
notifyAll解决了本方线程一定会唤醒对方的问题。。
因此，对于多生产，多消费问题，我们一般会采用 while++notifyAll...
while(flag)
  try{wait()}catch(...){} 
notifyAll;

8..
lock();
一把锁上可以实现多个监视器，await();signal();signalAll();
Lock lock=new ReentrantLock();
Condition  a1=lock.new Condition();
Condition  a2=lock.new Condition();

9..
线程结束：
用run方法结束..
怎么控制线程的任务结束呢？
任务中都会有循环结构，只要控制住循环结构就可以结束任务..
控制循环通常用定义标记来完成。

但是如果线程处于冻结状态，无法完成读取标记，可以用interrupt()方法将线程强制从冻结状态中恢复到运行状态中来，让线程具备CPU的执行资格，但是这种强制动作会发生异常TnterruptedException,要记得处理。
《以下方法讲的较少》
10..
Daemon();为守护线程，可以理解为后台线程，就是当前台线程都结束的时候，这个线程自动结束。
t2.setDaemon(true);

11..
join()方法-->等待该线程终止..
线程加入进来，用于临时加入一个线程参与运算的时候..
哪个线程运行到join()的到时候，就必须停下来等该线程结束的时候才能开始运行
t2.join();

12..
Priority();
线程的优先级别
1---MIN_PRIORITY;
5--NORM_PRIORITY;
10--MAX_PRIORITY;
t2.setPriority(Thread.MAX_PRIORITY);

13..
toString();返回线程的字符串表示形式，即线程名称、优先级和线程组。
14..
yield（）；
暂停当前正在执行的线程对象，并执行其他的线程。
